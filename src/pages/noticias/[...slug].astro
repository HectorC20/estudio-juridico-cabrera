---
import NoticiasPost from '../../layouts/NoticiasPost.astro';
import MarkdownContent from "../../components/MarkdownContent.astro";
const API_BASE_URL = import.meta.env.NODE_API_WAM;

interface NewsPost {
    newsName: string;
    id_author: string;
    title: string;
    description: string;
    pubDate: string;
    updatedDate?: string;
    heroImage?: string;
    categories: string[];
    tags?: string[];
    readingTime: number;
}

export async function getStaticPaths() {
    const apiUrl = `${API_BASE_URL}/news/newsList`;
    const response = await fetch(apiUrl);
    const newsList: NewsPost[] = await response.json(); // üî• Se tipa `newsList`

    return newsList.map((post: NewsPost) => ({  // üî• Se tipa `post`
        params: { slug: post.newsName },
        props: post,
    }));
}

// Obtener el slug de la URL
const { slug } = Astro.params;
const postApiUrl = `${API_BASE_URL}/news/newsSlug?slug=${slug}`;
const postResponse = await fetch(postApiUrl);
const post = await postResponse.json();

if (post.error) {
    return new Response(null, {
        status: 404,
        statusText: 'Not Found',
    });
}

const { data, content } = post;
const id_author = data.id_author;

// Datos por defecto del autor en caso de error o ausencia
let authorData = {
    name: "Autor Desconocido",
    lastname: " ?? ??",
    profileImage: "https://via.placeholder.com/50"
};

if (id_author) {
    const authorApiUrl = `${API_BASE_URL}/author/author?id=${id_author}`;
    try {
        const authorResponse = await fetch(authorApiUrl);

        if (authorResponse.ok) {
            const authorResponseData = await authorResponse.json();
            authorData = authorResponseData.data; // üî• Se extrae la propiedad `data`
        } else {
            console.log("‚ö†Ô∏è Error al obtener datos del autor:", authorResponse.status);
        }
    } catch (error) {
        console.error("‚ùå Error en la API del autor:", error);
    }
} else {
    console.error("‚ùå id_author es undefined, no se pudo buscar el autor.");
}

// Combinar los datos de la noticia con los datos del autor
const postWithAuthor = {
    ...data,
    author: authorData,
};
---

<NoticiasPost {...postWithAuthor}>
    <MarkdownContent content={content} />
</NoticiasPost>
